#include<iostream>
using namespace std;
#define add_size 10
#define initsize 100

typedef struct List {
	int* data;
	int len;
	int max_size;
};

//初始化
void initList(List&L)
{
	L.data =(int*)malloc(initsize * sizeof(int));//记住记住（int*）malloc(initsize*sizeof(int))；
	L.len = 0;
	L.max_size = initsize;
}

//添加数据
void add_elem(List& L,int elem)
{
	while (L.len+1 == L.max_size)//当数据达到最大容量的时候就扩容，每次扩add_size个空间
	{
		L.data = (int*)realloc(L.data, (L.max_size + add_size) * sizeof(int));//记住记住（int*)realloc(L.data,(L.max_mize+add_size)*sizeof(int))；
		L.max_size += add_size;
	}
	//数组的下标从1开始
	L.len += 1;
	L.data[L.len] = elem;
}

//寻找目标元素
int search(List& L, int tar)
{
	if (tar<1 || tar>L.len)
		return -1;
	else
		return L.data[tar];
}

//插入
bool insert(List& L,int tar,int elem)
{
	if (tar<1 || tar>L.len)
		return false;
	else
	{
		while (L.len == L.max_size)//如果刚好满了，扩容
		{
			L.data = (int*)realloc(L.data, (L.max_size + add_size) * sizeof(int));
			L.max_size += add_size;
		}
		for (int i = L.len + 1; i > tar; i--)
			L.data[i] = L.data[i - 1];
		L.data[tar] = elem;
		L.len += 1;
	}
}

//删除
bool delet(List& L, int tar)
{
	if (tar<1 || tar>L.len)
		return false;
	else
	{
		for (int i = tar; i <= L.len; i++)
			L.data[i] = L.data[i + 1];
		L.len -= 1;
	}
}

//打印
bool print(List& L)
{
	if (L.len == 0)
		return false;
	else
	{
		for (int i = 1; i <= L.len; i++)
			cout << L.data[i] << ' ';
		cout << "\n";
	}
}

//合并两条递增序列成一条
void combine(List& L1, List& L2,List &L3)
{
	int i = 1;//L1的
	int j = 1;//L2的
	L3.len = 1;
	while (i <= L1.len && j <= L2.len)
	{
		if (L1.data[i] <= L2.data[j])
			L3.data[L3.len++] = L1.data[i++]; //先赋值再＋1
		else
			L3.data[L3.len++] = L2.data[j++];
	}
	while (i <= L1.len)
		L3.data[L3.len++] = L1.data[i++];
	while (j <= L2.len)
		L3.data[L3.len++] = L2.data[j++];
	//最后会比实际的要多一个
	L3.len -= 1;
}

//左移或右移
void move(List& L, int dis)
{
	dis = dis % L.len;
	int temp[100];
	int len = 1;
	//往右移动，先把最右边的位子空出来，并保存数据
	for (int i = L.len; i > L.len - dis; i--)
		temp[len++] = L.data[i];
	//把剩下的从右往左分别移动
	for (int i = L.len - dis; i >=1 ; i--)
		L.data[i + dis] = L.data[i];
	//最后把临时的转移
	for (int i = 1; i <= dis; i++)
		L.data[i] = temp[dis+1-i];
}

int main()
{
	int num;
	int tar;
	int elem;
	int choice;
	List L1;
	List L2;
	List L3;
	initList(L1);
	initList(L2);
	initList(L3);
	while (cin >> num)
	{
		add_elem(L1, num);
		//需要放在最后面，否则会吃掉
		if (cin.get() == '\n')
			break;
	}
	print(L1);

	while (cin >> num)
	{
		add_elem(L2, num);
		//需要放在最后面，否则会吃掉
		if (cin.get() == '\n')
			break;
	}
	print(L2);


	combine(L1, L2, L3);
	print(L3);

	move(L3, 4);
	print(L3);
