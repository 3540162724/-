#include<iostream>
#include<queue>
using namespace std;

//利用结构体建立节点
typedef struct node {
	node* father;
	node* lchild;
	node* rchild;
	char data;
	int level;
}*tree,node;

//记住一定要初始化树
void inittree(tree&L)
{
	L = new node;
	L->father = NULL;
	L->lchild = NULL;
	L->rchild = NULL;
}

//建树
void createtree(tree& L, tree& father,int level)
{
	char d;
	cin >> d;
	if (d == '0')
		L = NULL;
	else
	{
		inittree(L);
		L->father = father;
		L->level = level;
		L->data = d;
		createtree(L->lchild, L, level + 1);
		createtree(L->rchild, L, level + 1);
	}
}

//递归先序遍历
void preread(tree& L)
{
	if (L)
	{
		cout << L->data << ' ';
		preread(L->lchild);
		preread(L->rchild);
	}
}

//递归中序遍历
void midread(tree& L)
{
	if (L)
	{
		midread(L->lchild);
		cout << L->data << ' ';
		midread(L->rchild);
	}
}


//递归后序遍历
void lastread(tree& L)
{
	if (L)
	{
		lastread(L->lchild);
		lastread(L->rchild);
		cout << L->data << ' ';
	}
}

//层次遍历（队列）
void levelread(tree& L)
{
	queue<tree> line;
	line.push(L);
	while (!line.empty())
	{
		if (line.front()->lchild)
			line.push(line.front()->lchild);
		if (line.front()->rchild)
			line.push(line.front()->rchild);
		cout << line.front()->data << ' ';
		line.pop();
	}
}

//计算树的高度
void high(tree& L,int *h)
{
	if (L)
	{
		if (L->level > *h)
			*h = L->level;
		high(L->lchild, h);
		high(L->rchild, h);
	}
}

//打印叶节点
void printye(tree& L)
{
	if (L)
	{
		if (L->lchild == NULL && L->rchild == NULL)
			cout << L->data << ' ' << L->level << '\n';
		else
		{
			printye(L->lchild);
			printye(L->rchild);
		}
	}
}

int main()
{
	tree L;
	tree father;
	inittree(father);
	createtree(L, father, 1);

	preread(L);
	cout << '\n';
	midread(L);
	cout << '\n';
	lastread(L);
	cout << '\n';
	levelread(L);
	cout << '\n';
	printye(L);


	//这个也要初始化--int* h=0--->是错误的
	int* h=new int;
	*h = 0;
	high(L, h);
	cout << "树的高度为:" << *h << '\n';
}
